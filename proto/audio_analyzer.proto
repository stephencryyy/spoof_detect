syntax = "proto3";

package audioanalyzer;
option go_package = "example.com/auth_service/gen/proto";

// Сервис для анализа аудио
service AudioAnalysis {
  // Метод для обработки аудиофайла из MinIO
  rpc AnalyzeAudio (AnalyzeAudioRequest) returns (AnalyzeAudioResponse);
}

// Запрос на анализ аудио
message AnalyzeAudioRequest {
  string minio_bucket_name = 1; // Название бакета в MinIO
  string minio_object_key = 2;  // Ключ (путь) к файлу в MinIO
  // string task_id = 3; // Опционально: ID задачи, если Go хочет его передать для логирования
  // Оставим task_id закомментированным, его можно будет добавить позже при необходимости
}

message AudioChunkPrediction {
  string chunk_id = 1;         // Например, "chunk_0", "chunk_1"
  float score = 2;             // Оценка вероятности спуфинга
  float start_time_seconds = 3; // Время начала чанка в секундах от начала файла
  float end_time_seconds = 4;   // Время окончания чанка в секундах
}

// Ответ с результатами анализа
message AnalyzeAudioResponse {
  repeated AudioChunkPrediction predictions = 1; // Список предсказаний по чанкам
  string error_message = 2;         // Сообщение об ошибке, если что-то пошло не так
}