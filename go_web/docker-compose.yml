services:
  go_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go_auth_service
    restart: unless-stopped
    env_file:
      - .env # Load environment variables from .env file
    environment: # Explicitly set DB_HOST
      DB_HOST: postgres_db 
    ports:
      - "${GO_APP_PORT:-8080}:${GO_APP_PORT:-8080}" # Use variable from .env or default to 8080
    depends_on:
      - postgres_db
      - minio # Add dependency on MinIO
      - minio-setup
    networks:
      - app_network

  postgres_db:
    image: postgres:15-alpine
    container_name: postgres_db_auth
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT:-5432}:5432" # Use variable from .env or default to 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # You can add a script to initialize the DB schema here if needed
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio_storage
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID}   # Use variables from .env
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY} # Use variables from .env
    ports:
      - "${MINIO_API_PORT:-9000}:9000"    # API Port
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # Console Port
    volumes:
      - minio_data:/data # Persist MinIO data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app_network

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Attempting to configure MinIO client (mc)...';
      mc alias set localminio http://minio:9000 $${S3_ACCESS_KEY_ID} $${S3_SECRET_ACCESS_KEY} --api S3v4;
      echo 'MinIO client configured. Attempting to create bucket audio-bucket...';
      mc mb --ignore-existing localminio/audio-bucket;
      echo 'Bucket audio-bucket creation attempt finished.';
      "
    environment:
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
    networks:
      - app_network

  redis_cache:
    image: redis:7-alpine
    container_name: redis_cache_service
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network

volumes:
  postgres_data: # Persists data even if the container is removed
  minio_data: # Define the volume for MinIO
  redis_data: # Define the volume for Redis

networks:
  app_network:
    driver: bridge