// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.1
// source: audio_analyzer.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос на анализ аудио
type AnalyzeAudioRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MinioBucketName string                 `protobuf:"bytes,1,opt,name=minio_bucket_name,json=minioBucketName,proto3" json:"minio_bucket_name,omitempty"` // Название бакета в MinIO
	MinioObjectKey  string                 `protobuf:"bytes,2,opt,name=minio_object_key,json=minioObjectKey,proto3" json:"minio_object_key,omitempty"`    // Ключ (путь) к файлу в MinIO
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AnalyzeAudioRequest) Reset() {
	*x = AnalyzeAudioRequest{}
	mi := &file_audio_analyzer_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeAudioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAudioRequest) ProtoMessage() {}

func (x *AnalyzeAudioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_audio_analyzer_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAudioRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeAudioRequest) Descriptor() ([]byte, []int) {
	return file_audio_analyzer_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyzeAudioRequest) GetMinioBucketName() string {
	if x != nil {
		return x.MinioBucketName
	}
	return ""
}

func (x *AnalyzeAudioRequest) GetMinioObjectKey() string {
	if x != nil {
		return x.MinioObjectKey
	}
	return ""
}

type AudioChunkPrediction struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ChunkId          string                 `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`                                // Например, "chunk_0", "chunk_1"
	Score            float32                `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`                                                 // Оценка вероятности спуфинга
	StartTimeSeconds float32                `protobuf:"fixed32,3,opt,name=start_time_seconds,json=startTimeSeconds,proto3" json:"start_time_seconds,omitempty"` // Время начала чанка в секундах от начала файла
	EndTimeSeconds   float32                `protobuf:"fixed32,4,opt,name=end_time_seconds,json=endTimeSeconds,proto3" json:"end_time_seconds,omitempty"`       // Время окончания чанка в секундах
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AudioChunkPrediction) Reset() {
	*x = AudioChunkPrediction{}
	mi := &file_audio_analyzer_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunkPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunkPrediction) ProtoMessage() {}

func (x *AudioChunkPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_audio_analyzer_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunkPrediction.ProtoReflect.Descriptor instead.
func (*AudioChunkPrediction) Descriptor() ([]byte, []int) {
	return file_audio_analyzer_proto_rawDescGZIP(), []int{1}
}

func (x *AudioChunkPrediction) GetChunkId() string {
	if x != nil {
		return x.ChunkId
	}
	return ""
}

func (x *AudioChunkPrediction) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AudioChunkPrediction) GetStartTimeSeconds() float32 {
	if x != nil {
		return x.StartTimeSeconds
	}
	return 0
}

func (x *AudioChunkPrediction) GetEndTimeSeconds() float32 {
	if x != nil {
		return x.EndTimeSeconds
	}
	return 0
}

// Ответ с результатами анализа
type AnalyzeAudioResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Predictions   []*AudioChunkPrediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`                       // Список предсказаний по чанкам
	ErrorMessage  string                  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Сообщение об ошибке, если что-то пошло не так
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeAudioResponse) Reset() {
	*x = AnalyzeAudioResponse{}
	mi := &file_audio_analyzer_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeAudioResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeAudioResponse) ProtoMessage() {}

func (x *AnalyzeAudioResponse) ProtoReflect() protoreflect.Message {
	mi := &file_audio_analyzer_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeAudioResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeAudioResponse) Descriptor() ([]byte, []int) {
	return file_audio_analyzer_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeAudioResponse) GetPredictions() []*AudioChunkPrediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *AnalyzeAudioResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_audio_analyzer_proto protoreflect.FileDescriptor

const file_audio_analyzer_proto_rawDesc = "" +
	"\n" +
	"\x14audio_analyzer.proto\x12\raudioanalyzer\"k\n" +
	"\x13AnalyzeAudioRequest\x12*\n" +
	"\x11minio_bucket_name\x18\x01 \x01(\tR\x0fminioBucketName\x12(\n" +
	"\x10minio_object_key\x18\x02 \x01(\tR\x0eminioObjectKey\"\x9f\x01\n" +
	"\x14AudioChunkPrediction\x12\x19\n" +
	"\bchunk_id\x18\x01 \x01(\tR\achunkId\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x02R\x05score\x12,\n" +
	"\x12start_time_seconds\x18\x03 \x01(\x02R\x10startTimeSeconds\x12(\n" +
	"\x10end_time_seconds\x18\x04 \x01(\x02R\x0eendTimeSeconds\"\x82\x01\n" +
	"\x14AnalyzeAudioResponse\x12E\n" +
	"\vpredictions\x18\x01 \x03(\v2#.audioanalyzer.AudioChunkPredictionR\vpredictions\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage2h\n" +
	"\rAudioAnalysis\x12W\n" +
	"\fAnalyzeAudio\x12\".audioanalyzer.AnalyzeAudioRequest\x1a#.audioanalyzer.AnalyzeAudioResponseB$Z\"example.com/auth_service/gen/protob\x06proto3"

var (
	file_audio_analyzer_proto_rawDescOnce sync.Once
	file_audio_analyzer_proto_rawDescData []byte
)

func file_audio_analyzer_proto_rawDescGZIP() []byte {
	file_audio_analyzer_proto_rawDescOnce.Do(func() {
		file_audio_analyzer_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_audio_analyzer_proto_rawDesc), len(file_audio_analyzer_proto_rawDesc)))
	})
	return file_audio_analyzer_proto_rawDescData
}

var file_audio_analyzer_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_audio_analyzer_proto_goTypes = []any{
	(*AnalyzeAudioRequest)(nil),  // 0: audioanalyzer.AnalyzeAudioRequest
	(*AudioChunkPrediction)(nil), // 1: audioanalyzer.AudioChunkPrediction
	(*AnalyzeAudioResponse)(nil), // 2: audioanalyzer.AnalyzeAudioResponse
}
var file_audio_analyzer_proto_depIdxs = []int32{
	1, // 0: audioanalyzer.AnalyzeAudioResponse.predictions:type_name -> audioanalyzer.AudioChunkPrediction
	0, // 1: audioanalyzer.AudioAnalysis.AnalyzeAudio:input_type -> audioanalyzer.AnalyzeAudioRequest
	2, // 2: audioanalyzer.AudioAnalysis.AnalyzeAudio:output_type -> audioanalyzer.AnalyzeAudioResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_audio_analyzer_proto_init() }
func file_audio_analyzer_proto_init() {
	if File_audio_analyzer_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_audio_analyzer_proto_rawDesc), len(file_audio_analyzer_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_audio_analyzer_proto_goTypes,
		DependencyIndexes: file_audio_analyzer_proto_depIdxs,
		MessageInfos:      file_audio_analyzer_proto_msgTypes,
	}.Build()
	File_audio_analyzer_proto = out.File
	file_audio_analyzer_proto_goTypes = nil
	file_audio_analyzer_proto_depIdxs = nil
}
